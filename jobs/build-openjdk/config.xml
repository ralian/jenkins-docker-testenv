<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Build image for workers/openjdk</description>
  <displayName>Build Worker - OpenJDK</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>upstream</name>
          <description>Upstream to use for the build</description>
          <defaultValue>debian:latest</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>downstream</name>
          <description>What to tag the result as</description>
          <defaultValue>workers/openjdk:latest</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cloud</name>
          <description>Which cloud to run in</description>
          <defaultValue>docker-host</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>nocache</name>
          <description>Ignore the build cache?</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>pull</name>
          <description>Pull latest from the remote</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3964.v0767b_4b_a_0b_fa_">
    <script>
// This is a bit of an experimental hack. We have to write out the dockerfile since there's no good way to transfer it from the jenkins container.
pipeline {
    agent {
        node {
            label 'openjdk-24-jdk'
        }
    }

    stages {
        stage('Write Dockerfile') {
                steps {
                writeFile(file: "Dockerfile", text: """
                ARG UPSTREAM=debian
                FROM $UPSTREAM

                # Note we could save about 100mb by using the JRE instead. Need to play around with settings.
                RUN apt update; apt install -y git openjdk-17-jdk;
                """)
            }
        }

        stage('Build Image') {
            steps {
                step([$class: 'DockerBuilderPublisher',
                  buildArgs: [UPSTREAM: params.upstream],
                  buildArgsString: "UPSTREAM=${params.upstream}",
                  cleanImages: false,
                  cleanupWithJenkinsJobDelete: false,
                  cloud: params.cloud,
                  dockerFileDirectory: '.',
                  fromRegistry: [url: 'https://index.docker.io/v1/'],
                  noCache: params.nocache,
                  pull: params.pull,
                  pushCredentialsId: '',
                  pushOnSuccess: false,
                  tagsString: params.downstream
                ])
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>